// Generated by CoffeeScript 1.8.0
var extend, parallelqueries, ql;

extend = require('extend');

parallelqueries = require('./parallelqueries');

ql = require('odoql/ql');

module.exports = function(el, component, stores) {
  var Relay, memory, pq, query, scene, state, update;
  scene = null;
  memory = {};
  query = {};
  state = {};
  update = function() {
    if (scene == null) {
      Relay.mount();
      return;
    }
    return scene.update(state, memory);
  };
  pq = parallelqueries(5, function(timings) {
    var times;
    times = Object.keys(query).map(function(prop) {
      return "  " + prop + " in " + timings[prop] + "ms";
    }).join('\n');
    console.log("âˆš completed\n" + times);
    return update();
  });
  Relay = {
    mount: function() {
      return scene = component.mount(el, state, memory);
    },
    update: function(params) {
      var diff, newquery, q, _i, _len, _results;
      extend(memory, params);
      newquery = component.query(memory);
      diff = ql.diff(query, newquery);
      query = newquery;
      if (Object.keys(diff).length === 0) {
        return update();
      }
      console.log(ql.describe(diff));
      diff = ql.build(diff, stores);
      _results = [];
      for (_i = 0, _len = diff.length; _i < _len; _i++) {
        q = diff[_i];
        _results.push((function(q) {
          return pq.exec(q.keys, function(cb) {
            return q.query(function(err, results) {
              if (err != null) {
                console.log("! " + err);
              }
              return cb(err, function(keys) {
                var key, _j, _len1, _results1;
                _results1 = [];
                for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
                  key = keys[_j];
                  _results1.push(state[key] = results[key]);
                }
                return _results1;
              });
            });
          });
        })(q));
      }
      return _results;
    },
    params: function() {
      return memory;
    },
    unmount: function() {
      scene.unmount();
      return scene = null;
    }
  };
  return Relay;
};
